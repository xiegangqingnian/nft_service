AppDebug: true   # 设置程序所处的模式，debug=true 调试模式，日志优先显示在控制台， debug=false 非调试模式，将写入日志文件

HttpServer:
  Api:
    Port: ":20191"                 #门户网站类端口,注意前面有冒号
  Web:
    Port: ":20202"                 #后端应用类端口,注意前面有冒号
  AllowCrossDomain: true           #是否允许跨域，默认 允许，注意：本项目跨域和nginx跨域只能允许设置一个即可，如果同时设置跨域，反而会造成无法跨域


Token:
  JwtTokenSignKey:  "nft"   #设置token生成时加密的签名
  JwtTokenOnlineUsers:  10         #一个账号密码允许最大获取几个有效的token，当超过这个值，第一次获取的token的账号、密码就会失效
  JwtTokenCreatedExpireAt: 28800      #创建时token默认有效秒数（token生成时间加上该时间秒数，算做有效期）,3600*8=28800 等于8小时
  JwtTokenRefreshExpireAt: 36000      #对于过期的token，支持从相关接口刷新获取新的token，默认有效期为10个小时，3600*10=36000 等于10小时
  BindContextKeyName: "userToken"     #用户在 header 头部提交的token绑定到上下文时的键名，方便直接从上下文(gin.context)直接获取每个用户的id等信息


Redis:
  Host:
  Port: 6379
  Auth:
  MaxIdle: 10
  MaxActive: 1000
  IdleTimeout: 60
  IndexDb: 1
  ConnFailRetryTimes: 3    #从连接池获取连接失败，最大重试次数
  ReConnectInterval: 1     # 从连接池获取连接失败，每次重试之间间隔的秒数



Logs:
  GinLogName: "/storage/logs/gin.log"                  #设置 gin 框架的接口访问日志
  GoSkeletonLogName: "/storage/logs/cw_backend.log"    #设置GoSkeleton项目骨架运行时日志文件名，注意该名称不要与上一条重复 ,避免和 gin 框架的日志掺杂一起，造成混乱。
  TextFormat: "json"                                #记录日志的格式，参数选项：console、json ， console 表示一般的文本格式
  TimePrecision: "millisecond"                         #记录日志时，相关的时间精度，该参数选项：second  、 millisecond ， 分别表示 秒 和 毫秒 ,默认为毫秒级别
  MaxSize: 10                                           #每个日志的最大尺寸(以MB为单位）， 超过该值，系统将会自动进行切割
  MaxBackups: 7                                        #保留旧日志最大个数
  MaxAge: 15                                           #保留旧日志最大天数
  Compress: false                                      #日志备份时，是否进行压缩




Websocket: #该服务与Http具有相同的ip、端口，因此不需要额外设置端口
  Start: 0                            #默认不启动该服务（1=启动；0=不启动）
  WriteReadBufferSize: 20480          # 读写缓冲区分配字节，大概能存储 6800 多一点的文字
  MaxMessageSize: 65535               # 从消息管道读取消息的最大字节
  PingPeriod: 30                      #心跳包频率，单位：秒
  HeartbeatFailMaxTimes: 4            # 允许心跳失败的最大次数（默认设置为PingPeriod=30秒检测一次，连续4次没有心跳就会清除后端在线信息）
  ReadDeadline: 0                     # 客户端在线情况下，正常的业务消息间隔秒数必须小于该值，否则服务器将会主动断开,单位：秒。 0 表示不设限制，即服务器不主动断开不发送任何消息的在线客户端
  WriteDeadline: 35                   # 消息单次写入超时时间，单位：秒


SnowFlake:
  SnowFlakeMachineId: 2               #如果本项目同时部署在多台机器，并且需要同时使用该算法，请为每一台机器设置不同的ID，区间范围: [0,1023]


Node:
  Host:  "ws://127.0.0.1"
  Port:  8545
  ContractAddr: 0xbfa27e6a252c2A2A4fe5FFBf24C6536985DcAfeA
  SystemAddr:
  SystemKey:

Ipfs:
  Host: "127.0.0.1:5001"             # "47.100.199.11:5001"  "https://ipfs.infura.io:5001"
  InfuraIpfsProjectID: "1uKzuR2gUao3ZwPFGXW9F72y9YK"
  InfuraProjectSecret: "bf1abffdbb59eec88b96c2b8de550b42"


Sms:        #三方短信模块配置 这里是赛邮的参数
  Appid: "50653"
  Appkey: "652141389c81228f48582376ba434ccb"
  SignType: "sha1"
  Length : 6  # 验证码的长度


FileUploadSetting:
  Size: 32                            #设置上传文件的最大值，单位：M，注意： 如果go前置nginx服务器，nginx 默认限制文件上传大小为 50 M ,用户上传文件限制还需要继续修改 nginx 配置
  UploadFileField: "file"            #post上传文件时，表单的键名
  UploadFileSavePath: "/storage/app/uploaded/" #上传文件保存在路径, 该路径与 BasePath 进行拼接使用
  UploadFileReturnPath: "/public/storage/uploaded/"  # 文件上后返回的路径，由于程序会自动创建软连接，自动将资源定位到实际路径，所有资源的访问入口建议都从public开始
  AllowMimeType: #允许的文件mime类型列表
    - "image/jpeg"                    #jpg、jpeg图片格式
    - "image/png"                     #png图片格式
    - "image/x-icon"                  #ico图片
    - "image/bmp"                     #bmp图片
    - "application/zip"               #xlsx、docx、zip
    - "application/x-gzip"            #tar.gz
    - "text/plain; charset=utf-8"     #txt log json等文本文件